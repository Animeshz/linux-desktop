; =============== Variables ===============

(defvar active_workspace 0)
(deflisten xworkspaces :initial ""
  `scripts/xworkspaces active_workspace`)

(defvar vol_icon "墳")
(deflisten vol_value :initial 100
  `scripts/volume vol_icon`)

(deflisten bright_value :initial 100
  `scripts/brightness`)

(defpoll updates_count :interval "1h"
  `xbps-install -Sun | wc -l`)

(deflisten music_title :initial ""
  `scripts/music player_toggle`)

(defpoll dtime_info :interval "10s"
  `date '+ %b %d  %I:%M %p'`)

(defpoll weather_info :interval "15m"
  `scripts/weather`)

(defvar temp_value "50")
(defvar pconsumption_value "5.0") ; https://unix.stackexchange.com/questions/10418/how-to-find-power-draw-in-watts

(deflisten battery_value :initial ""
  `scripts/battery`)

(defvar wifi_ssid "V2040")
  ; `scripts/wifi_ssid`)

(defvar player_toggle false)
(defvar cpu_toggle false)
(defvar ram_disk_toggle false)
(defvar wireless_toggle false)


; =============== Widget Structure ===============

(defwidget app [icon launch]
  (button :class "app" :onclick "jumpapp ${launch}" :onrightclick launch
    icon))

(defwidget workspace [index name]
  (button :class "workspace ${active_workspace == index ? 'active' : 'inactive'}" :onclick {"wmctrl -s " + index}
    name))

(defwidget separator []
  (box :class "separator" :style "padding: 0 4px 0 4px;" "|"))


; =============== Widget Group ===============

(defwidget apps []
  (box :class "apps"
    (app :icon "" :launch "firefox")
    (app :icon "" :launch "thunar")
    (app :icon "﬏" :launch "code-oss")))

(defwidget workspaces []
  (literal :content xworkspaces))

(defwidget brightness_sound []
  (box :class "widget-group white" :space-evenly false
    (box :class "red" "") " 100%"
    (separator)
    (box :class "yellow" vol_icon) " ${vol_value}"))

(defwidget music []
  (revealer :transition "slideleft" :duration "1s" :reveal player_toggle
    (box :class "green" :orientation "h" :space-evenly false :spacing 10
      music_title (separator))))

(defwidget date_time []
  (box :class "cyan" dtime_info))

(defwidget updates []
  (box :class "red" " ${updates_count} updates"))

(defwidget weather []
  (box :class "widget-group cyan" :space-evenly false " 25°C" (separator) " Windy"))

(defwidget cpu []
  (eventbox :onhover "eww update cpu_toggle=true" :onhoverlost "eww update cpu_toggle=false"
    (box :class "widget-group white" :space-evenly false
      (box :class "red" "  ") "${round(EWW_CPU.avg, 2)}%"
      (revealer :transition "slideright" :reveal cpu_toggle :duration "650ms"
        (box :space-evenly false
          (box :class "magenta" :space-evenly false :visible {temp_value != ''}
            (separator :visible false) " ${temp_value}°C")
          (box :class "yellow" :space-evenly false :visible {pconsumption_value != ''}
            (separator) " ${pconsumption_value}W"))))))

(defwidget ram_disk []
  (eventbox :onhover "eww update ram_disk_toggle=true" :onhoverlost "eww update ram_disk_toggle=false"
    (box :class "widget-group magenta" :space-evenly false
      " ${round(EWW_RAM["used_mem"]/1024, 0)}M" (revealer :transition "slideright" :reveal ram_disk_toggle " Used")
      (separator)
      " ${round(EWW_DISK["/"]["free"]/1024/1024/1024, 1)}G" (revealer :transition "slideright" :reveal ram_disk_toggle " Free"))))

(defwidget battery []
  (box :class "widget-group yellow" :visible {battery_value != ''} " ${battery_value}"))

(defwidget wifi_speed []
  (eventbox :onhover "eww update wireless_toggle=true" :onhoverlost "eww update wireless_toggle=false"
    (box :class "widget-group" :space-evenly false
      (box :class "green" "")
      (revealer :transition "slideright" :reveal wireless_toggle :class "green" " ${wifi_ssid}")
      (separator)
      (box :class "green" "${round(EWW_NET['eno16777736']['NET_UP'] / 1024, 0)}K ⇅ ${round(EWW_NET['eno16777736']['NET_DOWN'] / 1024, 0)}K"))))

(defwidget power []
  (button :class "red" :style "padding-right: 10px;" :onclick "" "⏻"))


; =============== Bar Group ===============

(defwidget barleft []
  (box :orientation "h" :space-evenly false :halign "start" :spacing 12
    (apps)
    (workspaces)
    (brightness_sound)
    (updates)))

(defwidget barmiddle []
  (box :orientation "h" :space-evenly false :halign "center" :spacing 10
    (music)
    (date_time)))

(defwidget barright []
  (box :orientation "h" :space-evenly false :halign "end" :spacing 10
    (weather)
    (cpu)
    (ram_disk)
    (battery)
    (wifi_speed)
    (power)))
  

; =============== Top-Level Window Definitions ===============

(defwindow topbar
  :monitor 0 :stacking "fg" :wm-ignore false :windowtype "dock"
  :reserve (struts :side "top" :distance "30px")
  :geometry (geometry :x "0" :y "0" :width "100%" :height "30px" :anchor "top center")
  (centerbox :orientation "h"
    (barleft) (barmiddle) (barright)))
